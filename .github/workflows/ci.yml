name: AIAhura CI PIPELINE

on:
  push:
    branches: [ "main" ]
    
permissions:
  contents: read
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest 
    steps:
        - name: Checkout code
          uses: actions/checkout@v4
       
        - name: Cache pip
          uses: actions/cache@v4
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
            
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
  
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r app/requirements.txt
            pip install flake8
  
        - name: Lint with flake8
          run: |
            flake8 . --count --max-complexity=10 --max-line-length=88 --statistics --exit-zero
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest httpx

      - name: Run Docker containers
        run: |
          docker compose up -d
          
      - name: Check health
        run: |
            timeout 120s bash -c "until docker compose ps | grep 'healthy'; do sleep 5; done"
            if [ $? -ne 0 ]; then echo "Health check failed"; exit 1; fi
          

      - name: Run tests with pytest
        run: | 
          export PYTHONPATH=$(pwd)
          pytest -v app/tests/test_app.py || true
          docker compose down

          
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
              ghcr.io/ramtinboreili/ai-interface-app:latest
              ghcr.io/ramtinboreili/ai-interface-app:${{ github.sha }}
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH and update app container
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /root/ai-inference-assessment
            git pull origin main
            docker-compose down
            docker-compose pull 
            docker-compose up -d 
